import java.util.Queue;
import java.util.Stack;
import java.util.Scanner;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;

public class UrnaElectoral {

    private LinkedList<Candidatos> listaCandidatos;
    private Stack<Voto> historialVotos;
    private Queue<Voto> votosReportados;
    private int Contador_votos;

    public UrnaElectoral() {
        listaCandidatos = new LinkedList<>();
        historialVotos = new Stack<>();
        votosReportados = new LinkedList<>();
        Contador_votos = 0;
    }

    LinkedList<Candidatos> getListaCandidatos() {
        return listaCandidatos;
    }

    boolean verificarVotante(Votantes votante) {
        return votante.getYaVoto();
    }

    void agregarCandidato(Candidatos c) {
        listaCandidatos.add(c);
    }

    Scanner sc = new Scanner(System.in);

    public void registrarVoto(Votantes votante, int candidatoId) {// Big O(N) creooo flaco

            System.out.println("Ingrese id del voto: ");
            int votoId = sc.nextInt();

            //verifica si ya voto o no
            if (!verificarVotante(votante)) {

                int votanteId = votante.getId();
                sc.nextLine(); //limpia el salto de línea
                //sc.nextLine();// este comando permite que no evalue en vacio el valor de la hora,
                // arrojando al instante este error "No respeta el formato mostrado"

                String hora =VerificarHora();//permite ingresar hora y retornarla con la estructura solicitada

                Voto nuevoVoto = new Voto(votoId, votanteId, candidatoId, hora);
                boolean encontrado = false;

                //verifica si el candidato a votar existe
                for (int i = 0; i < listaCandidatos.size(); i++) {
                    Candidatos candidato = listaCandidatos.get(i);//get(i) metodo que permite ir recorriendo las posiciones sin usar head de referencia
                    if (candidato.getId() == candidatoId) {
                        candidato.AgregarVoto(nuevoVoto);//agrega el voto al candidato correspondiente
                        encontrado = true;
                        break;
                    }
                }

                if (!encontrado) {//si el candidato no es encontrado el voto es nulo
                    System.out.println("Candidato no encontrado, voto nulo");
                    votosReportados.add(nuevoVoto);//recuerda cambiar que ya voto
                    votante.marcarComoVotado();
                }else{
                //despues de verificar los datos ingresados se crea el voto y se agrega al historial registrando
                //y se coloca que el votante ya voto
                    historialVotos.push(nuevoVoto);
                    votante.marcarComoVotado();
                    Contador_votos++;//Cuenta los ID para votos
                }
            }else {//si ya voto solo se reporta el voto guardando su id
                System.out.println("El votante ya ha votado");
                Voto nuevoVoto = new Voto(votoId);
                votosReportados.add(nuevoVoto);
            }
    }
    private String VerificarHora() {
        while (true) {
            System.out.print("Ingrese la hora en formato hh:mm:s :");
            String hora = sc.nextLine();
            String[] partes = hora.split(":");
            /*Corta la hora ingresada como string para ir agregandola por partes al arreglo gracias a .split(":")*/


            if (partes.length == 3) {
                try {//permite ver si arroja un error, el cual si se genera, ira al catch mediante el error que este puesto.

                    // Integer.parseInt metodo de java que permite convertir string a enteros
                    int hr = Integer.parseInt(partes[0]);
                    int min = Integer.parseInt(partes[1]);
                    int s = Integer.parseInt(partes[2]);

                    if (hr >= 0 && hr <= 23 && min >= 0 && min <= 59 && s >= 0 && s <= 59) {
                        System.out.println("Hora válida: " + hora);
                        return hora;
                    } else {
                        System.out.println("Valores fuera de rango");
                    }

                } catch (NumberFormatException error) {
                    //entra solo si se genera el error NumberFormatException, no logrando convertir de string a entero
                    // determinando que no respeto el formato h:m:s
                    System.out.println("Debe ingresar solo números, intente nuevamente");
                }
            } else {
                System.out.println("No respeta el formato mostrado");
            }
        }
    }
    //se entrega un candidato y un voto para reportar un voto en especifico
    public void reportarVoto(Candidatos candidato, int idVoto) {//Big O(2N) == O(N)
        Queue<Voto> votos = candidato.getVotosRecibidos();//apunta a los votos del candidato para recorrerlos
        int size = votos.size();
        boolean encontrado = false;
        Queue<Voto> nuevaCola = new LinkedList<>();//nueva cola para no perder el registro

        for (int i = 0; i < size; i++) {
            Voto v = votos.poll(); // borra y retorna el primero
            if (v.getId() == idVoto && !encontrado) {//compara el id de los votos para reportarlo
                votosReportados.add(v);
                encontrado = true;
                System.out.println("Voto reportado.");
            } else {
                nuevaCola.add(v); // mantenemos el voto hasta encontrar el que se busca
            }
        }

        //si esta vacia, significa que se encontro el voto al principio
        while (!nuevaCola.isEmpty()) {//si esta con valores, se agregara los votos en la cola original
            votos.add(nuevaCola.poll());
        }
        if (!encontrado) {
            System.out.println("Voto no encontrado en la cola.");
        }
    }

    public Map<String, Integer> obtenerResultados() {//O(N)
        Map<String, Integer> resultados = new HashMap<>();

        //Agregar los candidatos y numeros de voto al mapa
        for (int i = 0; i < listaCandidatos.size(); i++) {
            Candidatos candidato = listaCandidatos.get(i);
            String nombre = candidato.getNombre();
            int votos = candidato.getVotosRecibidos().size();
            resultados.put(nombre, votos);
        }

        return resultados;
    }
    public void mostrarResultados() {
        //Mostrar los resultados del mapa
        Map<String, Integer> resultados = obtenerResultados();

        List<Map.Entry<String, Integer>> listaResultados = new ArrayList<>(resultados.entrySet());
        //Lista recibira la llave(Candidatos) con sus valores(n°votos)
        System.out.println("*** Resultados de la elección ***");
        System.out.println("+------------+-------+");
        System.out.printf("| %-10s | %-3s |\n", "Candidato", "Votos");
        System.out.println("+------------+-------+");
        for (int i = listaResultados.size() - 1; i >= 0; i--) {
            Map.Entry<String, Integer> valor = listaResultados.get(i);
            System.out.printf("| %-10s | %-5d |\n", valor.getKey(), valor.getValue());
        }
        System.out.println("+------------+-------+");

    }
}
